/*
 * Copyright 2012 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package data;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;

import data.Truck;
import data.CircuitSolution;
import data.ContainerSet;

global HardSoftLongScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################
/*
rule "vehicleCapacity"
    when
        $vehicle : Vehicle($capacity : capacity)
        $demandTotal : Number(intValue > $capacity) from accumulate(
            Customer(
                vehicle == $vehicle,
                $demand : demand),
            sum($demand)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $capacity - $demandTotal.intValue());
end
*/
// ############################################################################
// Soft constraints
// ############################################################################
/*
rule "distanceToPreviousStandstill"
    when
        $containerSet : ContainerSet(previousStandstill != null, $distanceFromPreviousStandstill : distanceFromPreviousStandstill)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $distanceFromPreviousStandstill);
end

rule "distanceFromLastCustomerToDepot"
    when
        $containerSet : ContainerSet(previousStandstill != null)
        not ContainerSet(previousStandstill == $containerSet)
    then
        Truck truck = $containerSet.getTruck();
        scoreHolder.addSoftConstraintMatch(kcontext, - $containerSet.getDistanceTo(truck));
end
*/

// evaluate time by using distance + a fixed time for each ContainerSet
// distance is in metres, truck move at 10 m/s, so unit is 0.1 second
// take square to search solutions that is balancing circuit time between all trucks
// Not working => use easyScoreCalculatorClass instead
rule "squareCircuitTime"
	when
		$truck: Truck()
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -circuitTime*circuitTime);*/
        scoreHolder.addSoftConstraintMatch(kcontext, $truck.getScore());
end


// ############################################################################
// TimeWindowed: extra hard constraints
// ############################################################################
/*
rule "arrivalAfterDueTime"
    when
        TimeWindowedCustomer(dueTime < arrivalTime, $dueTime : dueTime, $arrivalTime : arrivalTime)
    then
        scoreHolder.addHardConstraintMatch(kcontext, $dueTime - $arrivalTime.intValue());
end
*/
// Score constraint arrivalAfterDueTimeAtDepot is a build-in hard constraint in VehicleRoutingImporter
